<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
            http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
            http://www.springframework.org/schema/aop 
            http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
            http://www.springframework.org/schema/tx 
            http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
            http://www.springframework.org/schema/context 
            http://www.springframework.org/schema/context/spring-context-3.1.xsd">
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="configLocation"
			value="classpath:hibernate.cfg.xml">
		</property>
	</bean>
	
	<!--定义Hibernate的事务管理器HibernateTransactionManager -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <!-- 依赖注入上面定义的sessionFactory -->
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
	<!-- 定义一个事务通知txAdvice,配置事务的传播特性 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 所有以browse、list、load、get及 is开头的业务逻辑方法均不需要事务控制且只读 -->
			<tx:method name="browse*" propagation="NOT_SUPPORTED" read-only="true"/>
			<tx:method name="list*" propagation="NOT_SUPPORTED" read-only="true"/>
			<tx:method name="load*" propagation="NOT_SUPPORTED" read-only="true"/>
			<tx:method name="get*" propagation="NOT_SUPPORTED" read-only="true"/>
			<tx:method name="is*" propagation="NOT_SUPPORTED" read-only="true"/>
			<!--hibernate4必须配置为开启事务 否则 getCurrentSession()获取不到-->  
            <tx:method name="get*" propagation="REQUIRED" read-only="true" />  
            <tx:method name="count*" propagation="REQUIRED" read-only="true" />  
            <tx:method name="find*" propagation="REQUIRED" read-only="true" />  
            <tx:method name="list*" propagation="REQUIRED" read-only="true" />  
			<!-- 设置所有方法均进行事务控制，如果当前没有事务，则新建一个事务 -->
			<tx:method name="*" propagation="REQUIRED"/>
		</tx:attributes>
	</tx:advice>
	 <!-- 开启注解处理器 -->
    <context:annotation-config/>
    <!-- 基于AOP技术的事务管理实现 -->
	<aop:config proxy-target-class="true">
		<!-- 定义一个事务切入点,拦截com.eportal.service.impl包中所有类的所有方法 -->
		<aop:pointcut id="transactionPointcut" expression="execution(* com.blackswan.fake.ServiceImpl.*.*(..))" />
		<!-- 引用txAdvice事务通知 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="transactionPointcut"/>
		
	</aop:config>	
	
	<!-- 装配HibernateTemplate实例 -->
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
		<constructor-arg ref="sessionFactory"/>
	</bean>
	<!--使用泛型Dao作为抽象基类-->
    <bean id="baseDao" class="com.blackswan.fake.Dao.BaseDaoImpl" >
        <property name="hibernateTemplate" ref="hibernateTemplate">
        </property>
    </bean>
    
    <!-- 部署通用业务逻辑组件BaseServiceImpl --> 
	<bean id="BaseServiceImpl"
	    class="com.blackswan.fake.ServiceImpl.BaseServiceImpl">
        <property name="baseDao" ref="baseDao"></property>
	</bean>
	<bean id="AdministratorManager"
	    class="com.blackswan.fake.ServiceImpl.AdministratorManager"
	    parent="BaseServiceImpl">
	</bean>
	<bean id="barberShopManager"
	    class="com.blackswan.fake.ServiceImpl.BarberShopManager"
	    parent="BaseServiceImpl">
	</bean>
	<bean id="BarberManager" class="com.blackswan.fake.ServiceImpl.BarberManager"
		parent="BaseServiceImpl">
	</bean>	
	<bean id="AdminAction"
	    class="com.blackswan.fake.Action.AdminAction" scope="prototype">
	    <property name="administratorManager" ref = "AdministratorManager">
	        </property> 
	</bean>
	<bean id="barberShopAction"
	   class="com.blackswan.fake.Action.BarberShopAction" scope="prototype">
	   <property name="barberShopManager" ref = "barberShopManager">
	        </property>
	</bean>
	<bean id="BarberAction" class="com.blackswan.fake.Action.BarberAction"
		scope="prototype">
		<property name="barberManager" ref="BarberManager">
		</property>
	</bean>
	<bean id="CustomerManager" class="com.blackswan.fake.ServiceImpl.CustomerManager"
		parent="BaseServiceImpl">
	</bean>
	<bean id="CustomerAction" class="com.blackswan.fake.Action.CustomerAction"
		scope="prototype">
		<property name="customerManager" ref="CustomerManager">
		</property>
	</bean>
	</beans>